[
  
    {
      "title"    : "Summary of JWT Vulnerabilities",
      "category" : "",
      "tags"     : "Web and JWT",
      "url"      : "/2024/01/26/Summary-of-JWT-Vulnerabilities/",
      "date"     : "Jan 26, 2024",
      "content": "I’ve briefly summarized the main vulnerabilities of JWT (JSON Web Token), focusing on the security aspects of JWT. This includes unverified signatures, information leakage, algorithm manipulation, vulnerabilities related to JWK and JKU, and vulnerabilities in the kid field.JWT ConceptWhat is JWT?JWT stands for JSON Web Token. It is a compact and self-contained way to securely transmit small amounts of data as a JSON object, defined by the web standard (RFC 7519).✓ Compact: This means that JWT stores information in a relatively small size, making it easy to transmit over networks and include in HTTP headers.✓ Self-contained: This indicates that JWT contains all the necessary information within itself.For secure transmission of token information, it is digitally signed. The signature commonly uses various algorithms like HMAC, RSA, etc.JWT StructureJWT consists of three parts:  Header: Contains information about the type of token (JWT) and the signature algorithm used (HMAC, RSA, etc.).  Payload: Contains Claim information to be included in the token. Claims can include attributes about the token user or additional data.  Signature: Combines the header and payload and signs them using the provided algorithm. This signature ensures the integrity and authentication of the token.Each part is separated in the form of aaaa.bbbb.cccc, and the values of the Header and Payload are base64 encoded.Since base64 can be decoded at any time, digital signing with the Signature is done to maintain the integrity of the Header and Payload.In other words, even if the Header and Payload are tampered with, the Signature verification can detect this tampering.JWT UsageJWT is mainly used for user authentication and information exchange. When a user logs in, the server returns the user’s information in a JWT. Then, the user can authenticate themselves in subsequent server requests using this JWT.Advantages  Self-contained: JWT contains all necessary information, eliminating the need for a separate state store, which is advantageous for implementing stateless servers.  Security: The inclusion of a digital signature guarantees data integrity.  Scalability: Easily used across various systems and languages.Disadvantages  Limitations of Stateless: Since JWT is stateless, once issued, tokens are difficult to manage centrally on the server. This can lead to challenges in handling token expiration or cancellation.  Token Expiration Handling: JWT can set expiration times, but once issued, the token remains valid until that time, making it difficult to expire early.  Token Size: JWT can grow in size as it contains all necessary information, impacting network bandwidth and potentially causing performance degradation, especially in mobile environments.  Performance Degradation: Each time a server verifies a token, it must compute the signature, which can cause performance issues in high-load environments.Vulnerabilities Summary      Unverified SignatureFailing to properly verify the Signature can lead to vulnerabilities like elevation of privileges and account takeover by merely tampering with the Payload.        Information LeakageThis occurs when the Payload, which is only Base64 encoded and not encrypted, can be decoded and read by anyone, leading to the risk of sensitive data exposure.    Algorithm Manipulation                  None AlgorithmA vulnerability exists when the alg field is set to none, considering the token valid without any signature verification. This allows attackers to tamper with the token’s payload without a signature, and the system might mistakenly recognize it as valid.                    Changing Asymmetric Encryption Algorithm to SymmetricA vulnerability exists when changing an asymmetric encryption algorithm to a symmetric one and using the public key as a symmetric key (secret key or pre-shared key). This allows attackers to tamper with the payload and still pass signature verification.                  JWK InjectionThis occurs when including a JWK in the JWT header and directly providing public key information. Attackers can insert their own JWK into the tampered token’s header and create a signature with the corresponding secret key. If the server uses this JWK without verification to validate the token’s signature, the tampered token may be mistakenly recognized as valid.        JKU SpoofingThis happens when the server uses a JSON Web Key (JWK) obtained from the JKU URL in the header without verification to validate the JWT’s signature. Attackers can manipulate the JKU claim to insert their own JWK URL, creating a tampered token signed with their key. If the server does not verify the authenticity of the altered JKU URL and uses it, the tampered token may be recognized as valid, exposing the server to security risks.    Vulnerability in the ‘kid’ FieldThis occurs during the process of the server using the kid value in the token’s header to find the key for token validation. The server searches the DB or file system for the key corresponding to the kid value. However, if the kid value is used without verification, attackers can manipulate this value to attempt attacks like SQL Injection, Path Traversal, or OS Command Injection. Such attacks can threaten server security and bypass token verification or cause other damage to the system. Therefore, the server needs a process to sufficiently verify and filter the kid value before use, ensuring it comes from a trusted source.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/01/26/Summary-of-JWT-Vulnerabilities/'> <img src='/images/Post-01.jpg' alt='Summary of JWT Vulnerabilities'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-01-26T21:51:00+09:00'>Jan 26, 2024</time> </span> </div><h2 class='article__title'>Summary of JWT Vulnerabilities</h2> <p class='article__excerpt'>I&#39;ve briefly summarized the main vulnerabilities of JWT (JSON Web Token), focusing on the security aspects of JWT. This includes unverified signatures, information leakage, algorithm manipulation, vulnerabilities related to JWK and JKU, and vulnerabilities in the `kid` field.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='LRTK'><img class='article__author-image' src='/images/author.jpeg' alt='LRTK's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>LRTK</a><span> in </span> <span class='article-tags'> <a href='/tag/Web' class='article__tag'>Web</a>  <a href='/tag/JWT' class='article__tag'>JWT</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "JWT 취약점 정리",
      "category" : "",
      "tags"     : "Web and JWT",
      "url"      : "/2024/01/26/JWT-%E1%84%8E%E1%85%B1%E1%84%8B%E1%85%A3%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%B7-%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5/",
      "date"     : "Jan 26, 2024",
      "content": "JWT (JSON Web Token)의 주요 취약점들에 대해 간략하게 정리하였습니다. 서명 미검증, 정보 누출, 알고리즘 변경, JWK 및 JKU 관련 취약점, 그리고 kid 필드 취약점 등 JWT의 보안 측면에 중점을 두고 설명하고 있습니다.JWT 개념JWT 이란?JWT은 JSON Web Token의 약자로, 웹 표준(RFC 7519)에 따라 정의된, 소량의 데이터를 JSON 객체로 안전하게 전송하기 위한 compact하고 self-contained 방식입니다.✓ compact : JWT가 비교적 작은 크기로 정보를 저장하며, 이로 인해 네트워크를 통한 전송이나 HTTP 헤더에 포함시키기 용이하다는 것을 의미✓ self-contained : JWT가 모든 필요한 정보를 스스로 내장하고 있다는 의미토큰 정보를 안전하게 전송하기 위해 디지털 서명이 되어 있습니다. 서명은 보통 HMAC, RSA 등의 여러 알고리즘을 사용하고 있습니다.JWT 구조JWT는 세 부분으로 구성됩니다.  Header : 토큰의 유형(JWT)과 사용된 서명 알고리즘(HMAC, RSA 등)에 대한 정보를 포함합니다.  Payload : 토큰에 담길 Claim 정보가 들어있습니다. Claim은 토큰 사용자에 대한 속성이나 추가 데이터를 포함할 수 있습니다.  Signature : 해더와 페이로드를 합쳐서, 제공된 알고리즘을 사용하여 서명합니다. 이 서명은 토큰의 무결성과 인증을 보장합니다.각 부분들은 aaaa.bbbb.cccc의 형태로 구분되어 있으며, Header와 Payload의 값은 base64로 인코딩되어 있습니다.base64은 언제든지 디코딩할 수 있기에 Header와 Payload의 무결성을 지키기 위하여 Signature으로 디지털 서명을 하게 됩니다.즉, Header와 Payload을 변조를 하더라고 Signature의 검증을 통해 변조 탐지가 된다는 것입니다.JWT의 사용JWT는 주로 사용자 인증과 정보 교환에 사용됩니다. 사용자가 로그인하면 서버는 사용자의 정보를 JWT에 담아 반환합니다. 이후 사용자는 해당 JWT를 통해 서버에 요청을 할 때마다 자신을 인증할 수 있습니다.장점  자가 포함: JWT는 필요한 모든 정보를 자체적으로 포함하기 때문에, 별도의 상태 저장소가 필요 없어 상태 비저장(stateless) 서버 구현에 유리합니다.  보안: 디지털 서명이 포함되어 있어 데이터 무결성을 보장합니다.  확장성: 다양한 시스템과 언어에서 쉽게 사용될 수 있습니다.단점  상태 비저장(stateless)의 한계: JWT는 상태 비저장 방식이므로, 일단 발급된 토큰은 서버에서 중앙집중식으로 관리하기 어렵습니다. 이는 토큰의 만료나 취소를 처리하는 데 어려움을 가져올 수 있습니다.  토큰 만료 처리: JWT는 만료 시간을 설정할 수 있지만, 일단 발급된 토큰은 그 만료 시간까지 유효하며, 조기에 만료시키기 어렵습니다.  토큰 크기: JWT는 필요한 모든 정보를 포함하므로, 토큰의 크기가 커질 수 있습니다. 이는 네트워크 대역폭에 영향을 미치고, 특히 모바일 환경에서는 성능 저하의 원인이 될 수 있습니다.  성능 저하: 서버가 토큰을 검증할 때마다 서명을 계산해야 하므로, 고부하 환경에서는 성능 저하의 원인이 될 수 있습니다.취약점 정리      Signature 미검증Signature을 제대로 검증하지 않으면, Payload 부분만 변조하여 관리자 상승 및 타 사용자 계정 탈취 등의 취약점으로 이어질 수 있습니다.        정보 누출페이로드가 단순히 Base64 인코딩만 되어 있고 암호화되지 않은 경우 발생합니다. 이로 인해 민감한 데이터가 포함된 페이로드가 누구나 디코딩하여 읽을 수 있게 되어 정보 누출의 위험이 있습니다.    알고리즘 변경                  None 알고리즘alg 필드가 none으로 설정된 경우, 서명을 전혀 검증하지 않고 토큰을 유효한 것으로 간주하는 취약점이 있습니다. 이를 이용하면, 공격자는 서명 없이 토큰의 페이로드를 변조할 수 있고, 시스템은 이를 유효한 토큰으로 잘못 인식할 수 있습니다.                    비대칭 암호화 알고리즘을 대칭 암호화 알고리즘으로 변경하는 취약점비대칭 암호화 알고리즘을 대칭 암호화 알고리즘으로 변경하고 공개키를 대칭키(비밀키 또는 사전에 공유된 키)로 사용함으로써, 페이로드를 변조한 후에도 서명 검증을 통과할 수 있는 취약점이 있습니다. 이를 이용하면, 공격자는 페이로드 변조 후 비밀키로 서명하여 유효한 토큰으로 인식 시킬 수 있습니다.                  JWK InjectionJWT 헤더에 JWK를 포함시키고, 이를 통해 공개키 정보를 직접 제공하는 방식에서 발생합니다. 공격자는 변조된 토큰의 헤더에 자신이 생성한 JWK를 삽입하고, 이에 해당하는 비밀키로 서명을 생성할 수 있습니다. 서버가 이 JWK를 검증 없이 사용하여 토큰의 서명을 검증할 경우, 변조된 토큰이 유효한 것으로 잘못 인식될 위험이 있습니다.        JKU Spoofing서버가 JWT의 서명을 검증할 때, 헤더에 포함된 JKU URL에서 가져온 JSON Web Key (JWK)를 검증 없이 사용하는 경우 발생합니다. 공격자는 JKU 클레임을 조작하여 자신의 JWK URL을 삽입하고, 해당 URL에 포함된 자신의 키로 서명한 변조된 토큰을 생성할 수 있습니다. 서버가 이 변조된 JKU URL의 신뢰성을 검증하지 않고 사용할 경우, 변조된 토큰이 서버에 의해 유효한 것으로 잘못 인식되어 보안 위험에 노출됩니다.    kid 필드 취약점토큰의 헤더에 있는 kid 값을 이용하여 서버가 토큰 검증에 사용할 키를 찾는 과정에서 발생합니다. 서버는 DB나 파일 시스템에서 kid 값에 해당하는 키를 찾아 토큰을 검증합니다. 하지만, kid 값이 검증되지 않은 상태로 사용될 경우, 공격자는 이 값을 변조하여 SQL 인젝션, 경로 순회(Path Traversal), OS 명령어 인젝션 등의 공격을 시도할 수 있습니다. 이러한 공격은 서버의 보안을 위협하고, 토큰 검증을 우회하거나 시스템에 다른 피해를 입힐 수 있습니다. 따라서 서버는 kid 값을 사용하기 전에 신뢰성 있는 출처로부터 온 것인지 충분히 검증하고 필터링하는 과정이 필요합니다.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/01/26/JWT-%E1%84%8E%E1%85%B1%E1%84%8B%E1%85%A3%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%B7-%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5/'> <img src='/images/Post-01.jpg' alt='JWT 취약점 정리'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2024-01-26T21:51:00+09:00'>Jan 26, 2024</time> </span> </div><h2 class='article__title'>JWT 취약점 정리</h2> <p class='article__excerpt'>JWT (JSON Web Token)의 주요 취약점들에 대해 간략하게 정리하였습니다. 서명 미검증, 정보 누출, 알고리즘 변경, JWK 및 JKU 관련 취약점, 그리고 `kid` 필드 취약점 등 JWT의 보안 측면에 중점을 두고 설명하고 있습니다.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='LRTK'><img class='article__author-image' src='/images/author.jpeg' alt='LRTK's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>LRTK</a><span> in </span> <span class='article-tags'> <a href='/tag/Web' class='article__tag'>Web</a>  <a href='/tag/JWT' class='article__tag'>JWT</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "블로그 개편 작업",
      "category" : "",
      "tags"     : "",
      "url"      : "/2024/01/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%ED%8E%B8-%EC%9E%91%EC%97%85/",
      "date"     : "Jan 23, 2024",
      "content": "깃허브 블로그 개편 작업 중",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/01/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%ED%8E%B8-%EC%9E%91%EC%97%85/'> <img src='/images/Post-00.jpg' alt='블로그 개편 작업'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-01-23T15:26:00+09:00'>Jan 23, 2024</time> </span> </div><h2 class='article__title'>블로그 개편 작업</h2> <p class='article__excerpt'>깃허브 블로그 개편 작업 중</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='LRTK'><img class='article__author-image' src='/images/author.jpeg' alt='LRTK's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>LRTK</a></div></div></div></div></div>"
    } 
  
]
